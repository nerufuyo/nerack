# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the IDE and the
# command line.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:very_good_analysis/analysis_options.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Clean Architecture & Code Quality Rules
    prefer_single_quotes: true
    prefer_const_constructors: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_fields: true
    prefer_final_locals: true
    prefer_final_in_for_each: true
    prefer_if_null_operators: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_null_aware_operators: true
    require_trailing_commas: true
    
    # Flutter Best Practices
    avoid_print: true
    avoid_unnecessary_containers: true
    avoid_web_libraries_in_flutter: true
    sized_box_for_whitespace: true
    use_build_context_synchronously: true
    use_key_in_widget_constructors: true
    avoid_function_literals_in_foreach_calls: true
    avoid_redundant_argument_values: true
    
    # Performance & Memory
    avoid_slow_async_io: true
    close_sinks: true
    cancel_subscriptions: true
    
    # Error Prevention
    always_declare_return_types: true
    annotate_overrides: true
    avoid_catching_errors: true
    avoid_empty_else: true
    avoid_null_checks_in_equality_operators: true
    avoid_returning_null_for_future: true
    avoid_types_as_parameter_names: true
    camel_case_types: true
    empty_catches: true
    no_duplicate_case_values: true
    throw_in_finally: true
    unrelated_type_equality_checks: true
    valid_regexps: true
    
    # Documentation & Readability
    slash_for_doc_comments: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_new: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_statements: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    
    # Disable rules that conflict with clean architecture or are too restrictive
    public_member_api_docs: false
    lines_longer_than_80_chars: false
    flutter_style_todos: false

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.gr.dart"
    - "**/*.config.dart"
    - "build/**"
    - "lib/generated/**"
    - ".dart_tool/**"
  
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

  errors:
    # Treat missing required parameters as errors
    missing_required_param: error
    # Treat missing returns as errors
    missing_return: error
    # Treat invalid assignments as errors
    invalid_assignment: error
    # Treat dead code as errors
    dead_code: error
    # Treat unused imports as errors
    unused_import: error
    # Treat unused local variables as errors
    unused_local_variable: error
    # Treat type errors as errors
    argument_type_not_assignable: error
    invalid_annotation_target: error

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
