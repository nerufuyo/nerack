name: Flutter CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  FLUTTER_VERSION: '3.16.0'

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed lib/ test/
        
      - name: Analyze code
        run: flutter analyze --fatal-infos
        
      - name: Check for outdated dependencies
        run: flutter pub outdated

  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs
        
      - name: Run tests with coverage
        run: flutter test --coverage
        
      - name: Check test coverage
        run: |
          # Install lcov for coverage analysis
          sudo apt-get update -qq -y
          sudo apt-get install -qq -y lcov
          
          # Generate coverage report
          genhtml coverage/lcov.info -o coverage/html
          
          # Check coverage percentage (minimum 70%)
          COVERAGE=$(lcov --summary coverage/lcov.info | grep "lines" | awk '{print $2}' | sed 's/%//')
          echo "Test coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Error: Test coverage is below 70% threshold"
            exit 1
          fi
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [analyze, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs
        
      - name: Build APK (Debug)
        run: flutter build apk --debug
        
      - name: Build APK (Release)
        if: github.ref == 'refs/heads/main'
        run: flutter build apk --release
        
      - name: Build App Bundle (Release)
        if: github.ref == 'refs/heads/main'
        run: flutter build appbundle --release
        
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/
          
      - name: Upload App Bundle artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: android-appbundle
          path: build/app/outputs/bundle/release/

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [analyze, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs
        
      - name: Build iOS (Debug)
        run: flutter build ios --debug --no-codesign
        
      - name: Build iOS (Release)
        if: github.ref == 'refs/heads/main'
        run: flutter build ios --release --no-codesign
        
      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: build/ios/

  integration_test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Get dependencies
        run: flutter pub get
        
      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs
        
      - name: Run integration tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          script: flutter test integration_test/

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Setup Flutter for dependency check
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Check for known vulnerabilities
        run: flutter pub deps

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build_android, build_ios]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Android artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-apk
          path: ./artifacts/android/
          
      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: ./artifacts/android/app-debug.apk
          
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build_android, build_ios]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Android artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-appbundle
          path: ./artifacts/android/
          
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          
      - name: Deploy to Google Play Store
        env:
          GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
        run: |
          echo "Production deployment would happen here"
          echo "Requires Google Play Console setup and signing keys"
